{"version":3,"sources":["pages/auth/CompleteRegistrationForm.js"],"names":["antIcon","style","fontSize","spin","CompleteRegistrationForm","useState","email","setEmail","loading","setLoading","history","useHistory","useEffect","window","localStorage","getItem","onFinish","value","password","console","log","toast","error","position","length","auth","signInWithEmailLink","location","href","user","emailVerified","removeItem","currentUser","updatePassword","getIdTokenResult","push","className","src","image","alt","name","initialValues","remember","textAlign","fields","Item","rules","required","message","disabled","prefix","placeholder","type","size","htmlType","width","indicator"],"mappings":"gRAaMA,EAAU,cAAC,IAAe,CAACC,MAAO,CAAEC,SAAU,IAAMC,MAAI,IA2H/CC,UA1Hf,WACE,MAA0BC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KACtB,EAA6BF,oBAAS,GAAM,mBAArCG,EAAO,KAACC,EAAU,KAEnBC,EAAUC,cAEhBC,qBAAU,WAERL,EAASM,OAAOC,aAAaC,QAAQ,wBACvC,GAAG,IAIH,IAAMC,EAAQ,iDAAG,WAAOC,GAAK,mFAG3B,GAFOC,EAAYD,EAAZC,SACPC,QAAQC,IAAIH,GAEPC,EAAS,CAAD,eACuD,OAAlEG,IAAMC,MAAM,uBAAwB,CAAEC,SAAU,iBAAkB,+BAEzDL,EAASM,OAAS,GAAC,iBAGzB,OAFHH,IAAMC,MAAM,+CAAgD,CAC1DC,SAAU,iBACT,2BAIe,OAJf,UAIDd,GAAW,GAAK,UACKgB,IAAKC,oBACxBpB,EACAO,OAAOc,SAASC,MAChB,KAAD,GAHW,WAIDC,KAAKC,cAAc,CAAD,gBAE4B,OAAvDjB,OAAOC,aAAaiB,WAAW,wBAAwB,UACpCN,IAAKO,YAAY,KAAD,GAAzB,OAAJH,EAAI,iBACLA,EAAKI,eAAef,GAAU,KAAD,oBAC9BW,EAAKK,mBAAmB,KAAD,GAK3BxB,EAAQyB,KAAK,KAAK,wBAElBhB,QAAQC,IACN,uBACAP,OAAOC,aAAaC,QAAQ,yBAC5B,2DAGJN,GAAW,GACXU,QAAQC,IAAI,EAAD,IACXC,IAAMC,MAAM,0FAEV,CACEC,SAAU,iBAEZ,2DAEP,gBA9Ca,sCA+Cd,OACE,mCACE,sBAAKa,UAAU,QAAO,UACtB,qBAAKA,UAAU,gBAAe,SAC5B,qBAAKC,IAAKC,IAAOC,IAAI,WAEvB,eAAC,IAAI,CACLC,KAAK,eACLJ,UAAU,aACVK,cAAe,CACbC,UAAU,GAEZ1B,SAAUA,EACVf,MAAO,CAAC0C,UAAU,UAClBC,OAAQ,CACN,CACEJ,KAAM,CAAC,SACPvB,MAAOX,IAET,UAEF,cAAC,IAAKuC,KAAI,CACRL,KAAK,QAELM,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,4BAEX,SAGF,cAAC,IAAK,CAACC,UAAQ,EAACC,OAAQ,cAAC,IAAY,CAACd,UAAU,wBAA0Be,YAAY,YAExF,cAAC,IAAKN,KAAI,CACRL,KAAK,WACLM,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BAEX,SAEF,cAAC,IAAK,CACJE,OAAQ,cAAC,IAAY,CAACd,UAAU,wBAChCgB,KAAK,WACLD,YAAY,eAIhB,cAAC,IAAKN,KAAI,UACR,cAAC,IAAM,CAACQ,KAAK,QAAQD,KAAK,UAAUE,SAAS,SAASlB,UAAU,oBAAoBnC,MAAO,CAACsD,MAAM,QAAQ,SACzG/C,EAAS,cAAC,IAAI,CAACgD,UAAWxD,IAAe,mCAQlD,C","file":"static/js/20.76b68f6b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { auth } from \"../../firebase\";\nimport \"./completeregister.css\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router\";\n\n//components\nimport { Form, Input, Button,Spin } from 'antd';\nimport { UserOutlined, LockOutlined,LoadingOutlined } from '@ant-design/icons';\nimport image from '../../images/logo.png';\n// import { useSelector } from \"react-redux\";\n\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nfunction CompleteRegistrationForm() {\n  const [email, setEmail] = useState(\"\");\n  const [loading,setLoading] = useState(false);\n  // const {user} = useSelector((state)=>({...state}))\n  const history = useHistory();\n\n  useEffect(() => {\n    // console.log(window.localStorage.getItem(\"EmailForRegistration\"));\n    setEmail(window.localStorage.getItem(\"EmailForRegistration\"));\n  }, []);\n\n// console.log(\"email\",email)\n\n  const onFinish = async (value) => {\n    const {password} = value;\n    console.log(value)\n    //validation for password\n    if (!password) {\n      toast.error(`Password is required`, { position: \"bottom-right\" });\n      return;\n    } else if (password.length < 6) {\n      toast.error(`Password sholud be atleast 6 characters long`, {\n        position: \"bottom-right\",\n      });\n      return;\n    } else\n      try {\n        setLoading(true)\n        const result = await auth.signInWithEmailLink(\n          email,\n          window.location.href\n        );\n        if (result.user.emailVerified) {\n          //deleting email from localstorage\n          window.localStorage.removeItem(\"EmailForRegistration\");\n          const user = await auth.currentUser;\n         await user.updatePassword(password);\n        await user.getIdTokenResult();\n          // console.log(\"idTokenResult\", idTokenResult);\n          // console.log(\"newPassword\", newPassword);\n\n          //Redirect user\n          history.push(\"/\");\n        } else {\n          console.log(\n            \"user is not verified\",\n            window.localStorage.getItem(\"EmailForRegistration\")\n          );\n        }\n      } catch (error) {\n        setLoading(false)\n        console.log(error);\n        toast.error(\n          `Verification link sent to email has been expired or not working. Try to register again `,\n          {\n            position: \"bottom-right\",\n          }\n        );\n      }\n  };\n  return (\n    <>\n      <div className=\"login\">\n      <div className=\"logo__wrapper\">\n        <img src={image} alt=\"logo\"/>\n      </div>\n      <Form\n      name=\"normal_login\"\n      className=\"login-form\"\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n      style={{textAlign:\"center\"}}\n      fields={[\n        {\n          name: [\"Email\"],\n          value: email,\n        },\n      ]}\n    >\n      <Form.Item\n        name=\"Email\"\n        // initialValue={email}\n        rules={[\n          {\n            required: false,\n            message: 'Please enter your Email',\n          },\n        ]}\n        \n      >\n        <Input disabled prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\n      </Form.Item>\n      <Form.Item\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please enter your Password',\n          },\n        ]}\n      >\n        <Input\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <Button size=\"large\" type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{width:\"100%\"}}>\n        {loading?(<Spin indicator={antIcon} />) : 'Complete Registration'}\n        </Button>\n        {/* Or <NavLink to=\"/register\">register now!</NavLink> */}\n      </Form.Item>\n    </Form>\n      </div>\n    </>\n  );\n}\n\nexport default CompleteRegistrationForm;\n"],"sourceRoot":""}