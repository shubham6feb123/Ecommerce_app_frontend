{"version":3,"sources":["pages/user/Password.js"],"names":["antIcon","style","fontSize","spin","Password","useState","loading","setLoading","history","useHistory","onFinish","values","password","confirmpassword","toast","error","position","length","auth","currentUser","updatePassword","success","push","console","log","message","className","src","image","alt","name","initialValues","remember","textAlign","Item","rules","required","prefix","type","placeholder","size","htmlType","width","indicator"],"mappings":"uQAYMA,EAAU,cAAC,IAAe,CAACC,MAAO,CAAEC,SAAU,IAAMC,MAAI,IAsG/CC,UApGf,WACE,MAA6BC,oBAAS,GAAM,mBAArCC,EAAO,KAACC,EAAU,KACnBC,EAAUC,cAEVC,EAAQ,iDAAG,WAAOC,GAAM,mFACG,GAAxBC,EAA4BD,EAA5BC,SAASC,EAAmBF,EAAnBE,gBAAe,SAE3BD,GAAWC,EAAe,gBAIxB,OAHFC,IAAMC,MAAM,2CAA2C,CACnDC,SAAU,iBAEZ,6BAEIJ,IAAWC,EAAe,iBAGlC,OAFFC,IAAMC,MAAM,wBAAwB,CAChCC,SAAU,iBACZ,gCAEOJ,EAASK,OAAQ,GAAC,iBAC/BH,IAAMC,MAAM,sCAAsC,CAC9CC,SAAU,iBACZ,wBAGuB,OAAjBT,GAAW,GAAM,UACTW,IAAKC,YAAYC,eAAeR,GAAU,KAAD,GAC9CL,GAAW,GACXO,IAAMO,QAAQ,mBAAmB,CAC7BL,SAAU,iBAEdR,EAAQc,KAAK,KAAK,0DAGzBC,QAAQC,IAAI,EAAD,IACXjB,GAAW,GACXO,IAAMC,MAAM,KAAMU,QAAQ,CACtBT,SAAU,iBACZ,0DAIH,gBArCa,sCAsCd,OACE,mCACE,sBAAKU,UAAU,WAAU,UACzB,qBAAKA,UAAU,gBAAe,SAC5B,qBAAKC,IAAKC,IAAOC,IAAI,WAEvB,eAAC,IAAI,CACLC,KAAK,eACLJ,UAAU,aACVK,cAAe,CACbC,UAAU,GAEZtB,SAAUA,EACVT,MAAO,CAACgC,UAAU,UAAU,UAE5B,cAAC,IAAKC,KAAI,CACRJ,KAAK,WACLK,MAAO,CACL,CACEC,UAAU,EACVX,QAAS,+BAEX,SAEF,cAAC,IAAK,CACJY,OAAQ,cAAC,IAAY,CAACX,UAAU,wBAChCY,KAAK,WACLC,YAAY,eAGhB,cAAC,IAAKL,KAAI,CACRJ,KAAK,kBACLK,MAAO,CACL,CACEC,UAAU,EACVX,QAAS,+BAEX,SAEF,cAAC,IAAK,CACJY,OAAQ,cAAC,IAAY,CAACX,UAAU,wBAChCY,KAAK,WACLC,YAAY,uBAKhB,cAAC,IAAKL,KAAI,UACR,cAAC,IAAM,CAACM,KAAK,QAAQF,KAAK,UAAUG,SAAS,SAASf,UAAU,oBAAoBzB,MAAO,CAACyC,MAAM,QAAQ,SACzGpC,EAAS,cAAC,IAAI,CAACqC,UAAW3C,IAAe,mBAOlD,C","file":"static/js/22.cdf1330a.chunk.js","sourcesContent":["import React, { useState} from \"react\";\nimport { auth } from \"../../firebase\";\nimport \"./password.css\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router\";\nimport {LoadingOutlined} from \"@ant-design/icons\";\n\n//components\nimport { Form, Input, Button, Spin } from 'antd';\nimport {  LockOutlined } from '@ant-design/icons';\nimport image from '../../images/logo.png';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nfunction Password() {\n  const [loading,setLoading] = useState(false);\n  const history = useHistory();\n\n  const onFinish = async (values) => {\n    const {password,confirmpassword} = values;\ntry {\n    if(!password||!confirmpassword){\n        toast.error('password daal madarchod hosiyaari mat kr',{\n            position: \"bottom-right\"\n          \n        })\n        return;\n    } else if(password!==confirmpassword){\n    toast.error(\"Password not matching\",{\n        position: \"bottom-right\"\n    })\n    return;\n    }else if(password.length <6){\ntoast.error('Password should be 6 character long',{\n    position: \"bottom-right\"\n})\n    }\n    else{\n        setLoading(true);\n          await auth.currentUser.updatePassword(password);\n           setLoading(false);\n           toast.success('Password Updated',{\n               position: \"bottom-right\"\n           })\n           history.push('/');\n    }\n} catch (error) {\n    console.log(error);\n    setLoading(false);\n    toast.error(error.message,{\n        position: \"bottom-right\",\n    })\n\n}\n\n  }\n  return (\n    <>\n      <div className=\"password\">\n      <div className=\"logo__wrapper\">\n        <img src={image} alt=\"logo\"/>\n      </div>\n      <Form\n      name=\"normal_login\"\n      className=\"login-form\"\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n      style={{textAlign:\"center\"}}\n    >\n      <Form.Item\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please enter your Password',\n          },\n        ]}\n      >\n        <Input\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n      </Form.Item>\n      <Form.Item\n        name=\"confirmpassword\"\n        rules={[\n          {\n            required: true,\n            message: 'Please enter your Password',\n          },\n        ]}\n      >\n        <Input\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n        />\n      </Form.Item>\n\n\n      <Form.Item>\n        <Button size=\"large\" type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{width:\"100%\"}}>\n        {loading?(<Spin indicator={antIcon} />) : 'Reset'}\n        </Button>\n      </Form.Item>\n    </Form>\n      </div>\n    </>\n  );\n}\n\nexport default Password;\n\n"],"sourceRoot":""}